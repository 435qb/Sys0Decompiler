System 1-3.0 Notes

Basics and Outputting to Screen

Because of technical restrictions, a special executable and decompiler/compiler are required to run localized System 1-3.0 code. This new executable (in all its game-specific variants) is referred to as "SysEng," and the decompiler/compiler required to create code for it is known as "Sys0Decompiler."

Original System 1-3.0 code can be decompiled from ADISK.DAT files (or BDISK.DAT, and so on), and places code in "page" files from page0000.adv and so on. Custom file names are not allowed, nor are gaps in the page numbering. Page files are made up of single-character ASCII commands followed by parameters, one command per line. To distinguish ASCII commands from ASCII text meant for output, Sys0Decompiler insists that text-for-output be put in single quotes or double quotes (favoring the former on decompile). This is in line with later versions of System. Text-for-output is sent immediately to the current "message box" when it is reached in code. For example:

	Y 240, 1:
	'Hello World'
	A
	
The text "Hello World" will be output immediately after the "Y" command and immediately before the "A" command. 

Generally, commands are followed by parameters and "closed" by the colon character, but commands without parameters (like the A command, above) forgo the colon, and errors may occur if it is included.

Keep in mind that any ASCII text found outside of quotes will be treated as commands rather than outright errors, which may lead to misleading error warnings.


Verbs and Objects

Some System 1-3.0 games rely heavily on a specific program flow based on menus created by pairing "verbs" with "objects." Essentially, verbs show up on the first menu screen, and after one selects a verb, they are presented by a list of assigned objects. So the verb "Punch" might be followed by "Goon," "Punching Bag," or "Self."  System 1-3.0 can rely VERY heavily on the verb-object menu, but alternate menus can be used via the $ command. By default the game will use the first batch of verb-object commands in a code file as the default menu. You can cause the game to give focus to the active menu using the ] command.

The code refers to verbs and objects by ID number, with the actual strings stored in AG00.DAT. Sys0Decompiler outputs verbs to !verbs.adv and objects to !objects.adv. For added readibility, Sys0Decompiler outputs verb and object IDs with one-based indexing instead of zero-based (as internal) so that the programmer can directly compare the line numbers in the !verbs/objects.adv file. So verb 3 can be found on line 3 in !verbs.adv, etc. Object 1 is special, andindicates the verb is used on its own, with no sub-menu. Because object 1 is used for standalone verbs and is never seen, it often has a filler value in !objects.adv, like "*".


Variables

Variables in System 1-3 are all unsigned shorts (0-65535) and are stored either under a name formed by the prefix "VAR" and a four-digit number (VAR0000-9999), or by a series of hardcoded variable names that represent synonyms for VAR0000-VAR0058. System 1-3 do not support custom variables names. Sys0Decompiler favors the hardcoded variable names when decompiling, as they are often referenced as such in documentation, but be aware that it will treat a hardcoded variable and its equivalent VAR label as identical during compilation (i.e. a change to VAR0000 is also a change to RND, as they are the same variable). The simple solution to this confusion is to avoid using VARs numbered 0000-0058 for custom purposes. Treat them as though they don't exist.

For a full reference, the hardcoded variable names correspond to the following var codes.

	VAR0000			: RND
	VAR0001-VAR0020 : D01-D20
	VAR0021-VAR0040 : U01-U20
	VAR0041-VAR0056 : B01-B16
	VAR0057			: M_X
	VAR0058			: M_Y
	
RND, aka VAR0000, is used the return target for many built-in commands and should be considered extremely volatile. 

Starting in System 2, numeric variables can be output to the message box via the H command, but in System 1 there is no way to directly output variables. You could instead create a state machine to test the values of variables, or other methods.

In addition to the above variables, System 1-3.0 also stores ten text string variables (of no more than 22 chars each), referred to by ID number and accessed using various commands. Unusually, System 1 can output these text vars despite having no way to modify them. The only System 1 game to even use string variables is D.P.S., which hard-codes a set of text variables during initialization.


Labels

System 1-3.0 (and for that matter, System 3.5) rely heavily on labels for control flow. While it's possible to use custom label names, they will be lost in the compile process, forcing the decompiler to use the format "lbl" followed by the hex address of the label in question. Labels are declared using the * command, e.g.:

	*lblExample:
    *lbla2ecf:
	
Various label-related commands can then be used to jump the playhead to the label declaration (*). For example,

	*basicLoop:
	'RANCE RULZ'
	@basicLoop:
	
creates an infinite loop.

System 1-3.0 are unable to jump directly to labels in other files. A common code structure is to set a certain variable, jump (&) or call (%) to the top of a new file, and then point the code in a given direction based on the variable (this file is usually dubbed GAMESUB.adv or SYSSUB.adv in 3.5, but Sys1-3.0 can't use unique file names).

Note that Sys0Decompiler supports any variable name you want (so long as it does not include a colon), whereas the original Sys3Decompiler forces the lbl[hex] format.


Mathematics

System 1 supports parentheses, multiplication, addition, and subtraction, as well as greater than, less than, equality (indicated with the "=" operator, not "==") and inequality (indicated with the "\" operator, not "!=") comparators. Note the absence of division, bitwise math, exponents, as well as greater-than-or-equal-to and less-than-or-equal-to comparators. System 2 and 3.0 add division, but none of the other missing operators.

System does not have dedicated and/or operators. Instead, you must treat the comparisons as math, with true comparisons converting to non-zero and false as 0. "*" is thus used to substitute for "and," since any false (0) will reduce the equation to 0. "+" substitutes for "or" in most situations, but you must be careful with it as there are exceptions where it does not function as a true "or" (also be careful not to fall into the semantic trap where "+" means "and" in English!).

Since System processes comparisons at the end of the order of operations (i.e. AFTER * and +), you MUST put each separate comparison into parentheses, with the * or + operators substituting for "or" and "and" in between. In short:

    (VAR0000 = 1) + (VAR0001 = 1)

is valid, but 

    VAR0000 = 1 + VAR0001 = 1

will throw an error due to the order of operations.


Character Width

TTSys and SysEng default to outputting text in zankaku "full-width" characters, which makes a real mess of Latin text. Hankaku, "half-width" characters are preferred for localized text. For this reason, the Y 240 command has been back-ported to System 1 and 2 from System 3.0. Add the following line of code early in the game, even as the very first line of code:

	Y 240, 1:
	
This only needs to be done once, but if zankaku mode is required for certain parts of the game to maintain layout or aesthetics, use 

	Y 240, 0:
	
to revert back to zankaku, and then use Y 240, 1: when you are done.

Setting the game to hankaku will cause it to output katakana instead of hiragana, and the reverse for zankaku, but once the game is localized this will not be a factor. Sys0Decompiler can output either character set during decompile.


Other

TTSys and SysEng account for game-specific hardcoded initializations that exist exclusively in System 1. These openings do not exist in the decompiled code Hardcoded openings exist for Little Vampire, Intruder, and Crescent Moon Girl. Additional hardcoded setup code exists in TTSys' NACT::NACT for Intruder and D.P.S. It's important to be aware of this "hidden code" when localizing, to either adjust, localize, or simply eliminate it in favour of putting all of the game's code in the proper code files.


System 1 Commands:

Here's my best attempt to understand System 1's commands. Note that most of the params attached to commands can be calculations, I just didn't bother to notate them all.

	! - !VARXXXX:val! - cmd_calc. Variable assignment. Variable name goes on the left of the colon, and a value, variable or or equation on the right.  The other formats allowed by System 3.5 do not yet exist.
	
	{ - { condition: - cmd_branch. Basically an "if" statement. Seems identical to the implementation in 3.5, but without else or else if statements.
	
	} - Ends a conditional branch.

	* - *lbl: - label declaration. Marks a label for use with @ and \ commands.
	
	@ - @lbl: - label_jump. Moves the playhead to the declaration of the given label (*).
	
	\ - \lbl: - label_call. Moves the playhead to the declaration of the given label, but retains the position of this line in memory. You can return to it via \0:. The game places previous positions in a stack, so after returning to the most recent \ call, you can return to the one before that, and so on.
	
	& - &num: - page_jump. "pages" are the source code files, so "&1:" moves to the top of page0001.
	
	% - page_call. As with page_jump, but retains the position of this line in memory, allowing the programmer to return there via %0:. A side effect of this is that it is impossible to page_call to page 0. Some games seem to be aware of this and do as little as possible in page 0, but this is hardly universal.
	
	$ - Used to set a non-standard menu (one that doesn't rely on verbs and objects) one entry at a time. Basically, you want to put a bunch of these in a block to create a full menu. The format is $label$, followed by lines of code defining the menu item's text, then another line with a standalone $. The most common use case would be:

                $ lbl4000 $
                "Menu"
                $

        However the code is happy to accept any combinations of commands that produce text, such as H or M commands.
	
	[ - [label, verbId, objID: - set_verbobj. Sets a verb-object pair to appear in the default menu. Make sure these commands (and any : commands) are placed next to one another in the code to make them part of the same menu.
	
	: - :condition, label, verbId, objID: - set_verbobj2, same as the above, but with a condition in front of the three variables. If the condition is not fulfilled, this menu item will not appear.
	
	] - open_menu. Jump to the currently selected menu, either the default (the first verb-obj menu set in the file) or the one recently created by a $ command. If no verb-obj menu exists, and there is no menu set by $ commands, the ] command will jump to the end of the file and immediately exit the game.
	
	A - End the text box and wait for user input. After the next input, start a new message box. Does not use a closing colon.
	
	F - Jumps back to the start of the current file. Does not use a closing colon.
	
	G - G idNum: - Loads (and displays) a CG with no transparency. Special provisions for Intruder. CG index must be a constant in System 1.
	
	L - L slot: - Loads a saved game from the given slot. Slots 1-26 available. System 1's slot number must be a constant.
	
	P - P idNum: - Changes the text color to a pre-set palette, selected by idNum.
	
	Q - Q slot: - Saves the game in the given slot. Slots 1-26 available. Unlike later versions, System 1's slot number must be a constant. Note that System 1-3.5 are extremely strict about saving, marking the exact address of the Q command in the file. If the command is moved so much as a byte in any direction, save files created by previous versions will fail! As a result, it's a good idea to move save commands towards the top of their files to minimize the amount of code that could potentially move the Q.
	
	R - Newline. Does not use a closing colon.
	
	S - S idNum: - Play the music index tied to the constant ID number, unless idNum is 0, in which case, the game will stop playing music.
	
	U - U idNum, colCode: - Loads a CG, including a transparency value (a color code to turn transparent?). Special provisions for Intruder. System 1 must use constants for both parameters.
	
	X - X idNum: - Displays text variables by ID number. This seems to be used exclusively by D.P.S., which sets the text vars during init (in TTSys, NACT::NACT()). Text variables are otherwise untouchable in System 1.
	
	Y - Y cmdId, param: - The extend command. This does a variety of wildly different things depending on the first parameter, passing the second param to the extend function as a parameter. Unfortunately, each extend number does different things depending on the game in question, making a "System 1 standard" list impossible. See source code for more details. The following commands are unique to SysEng and are not found in Alicesoft System 1 code:
		
		240: If param is 1, use hankaku (half-width) and katakana characters in the message and menu boxes. If param is 0, use zankaku (full-width) and hiragana characters. This is equivalent to ZH in System 3.5. Unlike past boolean params, param must be exactly 1 to be true, and anything else is false, instead of the reverse.
		
		242: Command unique to SysEng. Toggles menu font to use either the current variable-width font (param 0) or monospace font (param 1). To change the current font, see Y 244 and Y 246, below. If you attempt to switch to a font that was never specified or that did not load correctly, the command will fail and the current font will remain.
		
		243: Command unique to SysEng. As Y 242, but for the text field. To change the current font, see Y 245 and Y 247, below.
		
		244: Command unique to SysEng. Changes the current menu monospace font to either font 0, 1, or 2. Note that, if the menu is currently set to use variable-width fonts, this change will happen in the background.
		
		245: Command unique to SysEng. As Y 244, but for the text field.

		246: Command unique to SysEng. Changes the current menu variable-width font to either font 0, 1, or 2. Note that, if the menu is currently set to use monospace fonts, this change will happen in the background. If you attempt to switch to a variable-width font that was not specified at startup, the process will fail and the current font will remain active (if no variable-width fonts were specified at launch, the current font will remain "0" and it will be impossible to switch to variable-width fonts under any circumstances).
		
		247: Command unique to SysEng. As Y 246, but for the text field.
	
	Z - Z cmdId, param: - Another Extend command similar to Y, but only used by a small set of games.
	
	
In addition, several other latin captial letters are accounted for in NACT::Execute but do nothing: B, D, E, H, I, J, K, M, N, O, T, V, W. The 'C' command does not exist even in NACT:Execute.



System 3.0:

We're going to jump ahead to System 3.0 because Toshiya's work on System 2 seems to be incomplete.

Several functions in System 3 support "column mode," where X coords can be referred to in how many text columns they take up (a column being 8px wide) rather than pixels. Column mode is disabled by default, but can be adjusted by extend command Y 251.

System 3.0 supports multiple stack data structures. System 3.5 replaced these with only a single, but far more powerful, stack.


	! - !VARXXXX:val! - cmd_calc. Variable assignment. Variable name goes on the left of the colon, and a value, variable or or equation on the right.  The other formats allowed by System 3.5 do not yet exist.
	
	{ - { condition: - cmd_branch. Basically an "if" statement. Seems identical to the implementation in 3.5, but without else or else if statements.
	
	} - Ends a conditional branch.

	* - *lbl: - label declaration. Marks a label for use with @ and \ commands.
	
	@ - @lbl: - label_jump, as in 3.5. Moves the playhead to the declaration of the given label.
	
	\ - \lbl: - label_call, as in 3.5. Moves the playhead to the declaration of the given label, but retains the position of this line in memory. You can return to it via \0:.
	
	& - &num: - page_jump. "pages" are the source code files, so "&1:" moves to the top of page0001.
	
	% - page_call. As with page_jump, but retains the position of this line in memory, allowing the programmer to return there via %0:. A side effect of this format is that it is impossible to page call to page 0.
	
	$ - Used to create a non-standard menu (one that doesn't rely on verbs and objects) one entry at a time. Basically, you want to put a bunch of these in a block to create a full menu. The format is $label$, followed by any number of lines of code defining the menu item's text, then another line with a standalone $. The most common use case would be:

                $ lbl4000 $
                "Menu"
                $

        However the code is happy to accept any combinations of commands, presumably those that produce text, such as H or M commands, branching code, and so on.
	
	[ - [label, verbId, objID: - set_verbobj. Sets a verb-object pair to appear in the default menu. Make sure these commands are all next to one another (unless you make use of $ commands?).
	
	: - :condition, label, verbId, objID: - set_verbobj2, same as the above, but with a condition in front of the three variables. If the condition is not fulfilled, this menu item will not appear.
	
	] - open_menu. Jump to the currently selected menu, either the default (the first verb-obj menu set in the file) or the one recently created by a $ command. If no verb-obj menu exists, and there is no menu set by $ commands, the ] command will jump to the end of the file and immediately crash the game.
	
	A - End the text box and wait for user input. After the next input, start a new message box. Does not use a closing colon.
	
	B - B cmdId, index, p1, p2, p3, p4, p5: - Does a number of things related to either the message window or the game window, depending on the cmdId parameter. Each are nearly identical to the similarly-named commands in 3.5 (so "B 1" in System 3.0 is equal to "B1" in System 3.5), but instead of using width in params 4 and 5, it uses the coordinates of the bottom-right corner. B 1 and B 3 support column mode.
	
		1: Set the coordinates of the menu specified by index.
		
		2: Switch the currently active on-screen menu to the one specified by index, allowing multiple menu spaces to be used.
		
		3: Sets the coordinates of the message box designated by index. Often used with pop-up boxes (Y 7).
		
		4: Switch the currently active message box to the one specified by index, allowing multiple to exist on the same screen. Often used with pop-up boxes (Y 7).
	
	E - E colCode, sx, sy, ex, ey: - Defines the rect used to clear the message box. Supports column mode. Seems to be equivalent to the 3.5 ES command. To manually clear the text box with this rectangle, use extend command Y 1, 1:.
	
	F - Jumps back to the start of the current file. Does not use a closing colon.
	
	G - G idNum: - Loads (and displays) a CG with no transparency.
	
	H - H length, num: - Outputs numeric variables to the current output stream. "length" specifies how many digits are displayed, with 0 displaying the full number. Note the lack of 3.5's HH command, which would display hankaku numerals. To do: Does this mean System 3.0 can't display zankaku numerals, or that it's driven by the current mode (Y 240)?
	
	I - I sx, sy, ex, ey, dx, dy: - Used for copying part of an image (the screen?). Supports column mode. Don't yet know what you use the copy for, or how. Probably has an equivalent in the 3.5 V commands, although I can't be certain which one. 
	
	J - J x, y: - Sets the CG output coordinate using absolute value. Supports column mode. Seemingly the equivalent of 3.5's J2 rather than J0, as the coordinates remain in memory until adjusted by the next J command.
	
	K - K mode: - Gets certain input from the user based on the mode. Will have to experiment with this once compilation is working, since it's very confusing. Two of the modes seem to have no differences from one another! I'd have to see it in action. Here's what I can deduce about the modes from a quick scan:

		0: Gets mouse input and outputs a newline.
		
		1: Tracks mouse coordinates?
		
		2 + 3: Tracks mouse coordinates and gets mouse input, and then gets keyboard input?
		
		4: Gets keyboard input?
		
		5: Gets keyboard input twice?
		
		6: Gets keyboard input?

	L - L slot: - Loads a saved game from the given slot. Slots 1-26 are standard. Loading from slot 0 or 101-126 is also permitted, but these are special somehow, with various differences that need investigating (they seem to be used for loading cross-session variables, such as whether the game has been cleared in the past to justify unlocking bonus content). Notably, SAVING to slots 101-126 is NOT permitted.
	
	M - M newString: - If tvar_index (set by extend command Y 8) is between 1 and 10, the string assigned to that variable will be changed to match the newString param.

		While the above is the most frequently used purpose of the M command, setting tvar_index to higher indicies also allow the M command to change the file name used for reading active game files by entering a replacement file name. tvar_index 31 changes the active code file, 32 changes the CG archive, 33 changes the music archive, and 34 the sound effects archive. Sys0Decompiler will combine code archives, so attempts to change code archives (tvar_index 31) should be treated with caution and preferably eliminated.
	
	N - N num, num, num: - Dummied in TTSys. Toshiya does account for the command in his debug output (giving the listed parameters). Seemingly only used by AmbivalenZ during setup. Presumably isn't necessary for TTSys/SysEng, but be cautious.
	
	O - O mode, val: - Used to pass multiple variables to or from a series of bitwise flags. If mode is 0 (implying there is a numeral in the "val" slot), it sets 17 variables (B01 through B016) to true or false depending on the result of val compared via bitwise AND over a series of preset, rising hex values from 0x1 through 0x8000. See the source for particulars. If the equation is not equal to 0 (implying the value in the "val" slot is a variable index), it does a sort of reverse version of the above, setting a single variable based on the current status of the above vars.
	
		Note that because "mode" can be a variable or formula, Sys0Decompiler cannot throw errors if the "val" parameter is not a valid variable index during mode 1. The programmer must mind this detail themselves!
	
	P - P index, r, g, b: - Changes the text color using RGB. Note the change from Sys1 and 2, allowing direct RGB color selection.
	
	Q - Q slot: - Saves the game in the given slot. Slots 1-26 are standard. Saving to slot 0 is also permitted, but this is special somehow. Needs investigating. Note that System 1-3.5 are extremely strict about saving, marking the exact address of the Q command in the file. If the command is moved so much as a byte in any direction, save files created by previous versions will fail! As a result, it's a good idea to move save commands towards the top of their files to minimize the amount of code that could potentially move the Q.
	
	R - Newline. Does not use a closing colon.
	
	S - S idNum: - Play the music index tied to the constant ID number, unless idNum is 0, in which case the game will stop playing music. S commands attempt to play local sound files by default, but the Z command can be used to re-assign digits to CD music instead, as described below.
	
	T - T x, y: - Sets the text output coordinates. Not yet sure how this is distinct from the message box's coordinates (despite this command also being in 3.5, I haven't used it), but I suspect it's just an offset. Changes are reset by extend command Y 1. Supports column mode.
	
	U - U idNum, colCode: - Loads a CG, including a transparency value (the color code to convert to transparency?). Special provisions for Rance 4.1 and 2.
	
	V - V mode, index: - Stack operations. In mode 0, sets U01-U20 to match indicies 0-20 of the stack ID given as the second parameter, and then also copy values from the same index of tvar_stack to the active text variables. On any other mode, do the reverse, copying active vars from U01-U20 and the text variables to the given stacks.
	
	W - W x, y, colCode: - Similar to a paint bucket tool in a graphics program, targeted at coordinates x and y, and filling with the given colour code. Probably equivalent to the CP command in 3.5.
	
	X - X idNum: - Displays text variables by ID number. 
	
	Y - Y cmdId, param: - Extend command. Does a variety of wildly different things depending on the first variable, using the second variable as a parameter. There are a HUGE number of commands, some of which have equivalents in 3.5 under other names. Some of the missing cmdIds explicitly do nothing in TTSys, but most others are simply passed over by the code. Because these functions are quite complex, my explanations may have to rely on TTSys' internal var names to make sense of them.
	
		1:	Resets any changes made to the text coords made via T commands, and clears the text box if param is 0. Note the changes from 3.5.
		
		2: 	Zeroes a set of variables depending on the param. If param is 0, sets D01-D20 (VAR0001-VAR0020) to 0. If param is 1, set U01-U20 (VAR0021-VAR0040) to 0. If param is 2, set B01-B16 (VAR0041-VAR0056) to 0. Once again, note the changes from 3.5.
		
		3:	Wait (param * 1/60th of a seconds) for key input. Y 3, 10001: is instead used as a toggle to modify for future Y 3 calls. It will cause future Y 3 calls to stop waiting as soon as input is confirmed (this will prevent subsequent input from overriding the original). This feature is disabled by default, and calls to Y 3, 10000: can manually disable it.
		
		4:	Generates a random integer from 1 to param (inclusive). If param is 0 or 1, return 0 (distinct from 3.5).
		
		7:  Draws a box selected by index. The box should be defined first using the B 3 command and B 4 commands. The default boxes will fill the entire screen if left untouched by B 3 and B 4.
		
		8:  Sets tvar_index, which is used by M commands and pop-ups created by Y 27.
		
		10: Turns off extract_palette_cg for the param's index, which is checked to see if the game should extract the palette from an image before displaying it. It's not clear why you would want this. Use Y 45 to retrieve extract_palette_cg or to set extract_palette_cg to a variable result.
		
		13: Adjusts text wait speed to (param-1) * 1000 / 60. 0 or 1 will both reduce wait speed to 0.
		
		14: Sets RND (VAR0000) to 1. Judging from Alicesoft code, this used to have been a test to see if the user had certain hardware based on the param (0 - FM Sound support; 2 - CD drive, etc). TTSys automatically assumes these parts exist, ergo the command always returns 1 without any checks.
		
		16: Stops music. Identical to S 0:.
		
		17: If param is 0, sets RND to 1 if music is playing, or 0 if it is not. If param is not 0, sets RND to 0.
		
		18: Collects two variables, "mark" and "loop," from the music manager, though I'm not clear what they do. Sets D01 (VAR0001) to the results from "mark," and D02 (VAR0002) to the results from "loop."
		
		19: Sets the next music_loop variable to param.
		
		25: Sets the menu font size depending on param. Param 1 = 16pt, 2 = 24, 3 = 32, 4 = 48, or 5 = 64. The program starts with menu font at 16, and will also set to 16 if you enter an invalid param. SysEng uses param 6 and 7 for a custom overrides that can be hardcoded for specific projects in AGS::AGS(), and feel free to add your own.
		
		26: Sets message box font size in an identical fashion to Y 25, above. If yo uare modifying the SysEng code, be aware that the fonts used are the same internal objects in both the menu and message box.
		
		27: Adjusts tvar_maxlen to match the param, and then calls DialogBoxParam to ask the user for a string, which will be assigned to tvar_index. Confusing, needs experimentation.
		
		28: If param is 0, set text_space (which appears to be the spacing between lines) to 2, the default. Otherwise, 0.
		
		30: If param is 1, set src_screen to 1. Otherwise, 0. Used for offscreen rendering?
		
		31: If param is 1, set dest_screen to 1. Otherwise, 0. Used for offscreen rendering?
		
		32: Set RND to the parameter, so long as the parameter is below 480. Otherwise, 480.
		
		40 or 42: Fade-in effect. No distinction between 40 and 42 (I presume they both fade from black, must check).
		
		41 or 43: Fade-out effect. 41 fades to black, 43 to white.
		
		45: Set extract_palette to match the boolean param.
		
		46: Provides direct control over get_palette, extract_palette and extract_cg using bitwise flags. param & 4 becomes get_palette, param & 2 becomes extract_palette, param & 1 becomes extract_cg.
		
		60: Set the variable named "scroll" to match the param and sets flush_screen to false. No idea what either of these entail.
		
		61: If param is true, set a pixel (coords (D01, D02) on screen D03) to a new color based on RND. If false, do the reverse by setting RND to the color of the pixel.
		
		70: Related to the mouse. If param is 2, seems to get mouse input so long as the mouse is within the box. If param is 3, move the cursor like Alicesoft games are so infamous for doing.
		
		71: Set mouse_sence [sic] to param. Seems to determine the range the mouse can move before causing the K command to respond to it? Hard to say with the K command, which is such a mess.
		
		73: Change the current cursor. 0 is the default arrow cursor.
		
		80: If param is 0, set RND to label_depth. If 1, set it to page_depth. These variables are used for keeping track of how "deep" you are when using \ and % commands, respectively.
		
		81: If param is 0, reduce label_depth by 1, min 0. If param is 1, page_depth. I believe functionally erases the oldest call in the label/page call stack (used by \ and % commands), leaving all subsequent calls intact.
		
		82: If param is 0, set label_depth to 0, which I believe functionally erases the entire label call stack. If 1, do the same to page_depth.
		
		100: Set RND to param without restrictions (unlike Y 32).
		
		101: Set pcm_index to param, for use with Y 102 and 103.
		
		102: If pcm_index is valid (there is a PCM audio file at that index), set the pcm value at that index to param.
		
		103: If pcm_index is valid, play that PCM (sound/music) file.
		
		104: Stop PCM playback.
		
		105: Check PCM for some presently unknown property (check if it is playing?), and then return true or false.
		
		106: Dummied. Toshiya calls this a "mystery command used in Otome Senki (乙女戦記)". He suspects it's PCM related, but since he doesn't know what it does, it is not supported by TTSys/SysEng.
		
		221-229: These commands dumps the contents of text vars to the message box, with spaces delineating. Almost certainly used for debugging, since it would create a huge mess. The commands vary as follows. If you use Y 221, it will dump only text var 1. Y 222 will cause you to dump text vars 1 and 2, and so on to Y 229, which dumps the first 9 text vars. There is no equivalent command to dump all ten text vars.
		
		230: Sets clear_text to the boolean param. If active, this seems to cause the message box to clear whenever the menu changes.
		
		231: Sets D01 (VAR0001) to 640, D02 (VAR0002) to either screen height (if param is 1) or 480 (any other param), and D03 (VAR0003) to something else depending on specific game (usually 256, the only exception being Alice's Cottage 3 for floppies, which returns 16. This probably color depth given similar results from Y 252). This command probably used to do more things that no longer matter: Rance 4.1 tries to use param 0, 1, and 2, even though TTSys treats params 0 and 2 alike.
		
		232: If param is 1, adjusts screen height to 480. Otherwise, 400.
		
		234: Sets menu_fix to the boolean param. The variable name probably should have been "menu_fixed," because it causes menu width to be fixed to the value provided by B1 commands. With it off, menu width is dynamic.
		
		236: Sets RND to 1024.
		
		238: Sets D01-D07 to clock-related variables: Year/Month/Day/Hour/Minute/Second for the first six variables, with D07 set to the day of the week+1. Have to test to see which day of the week is actually 0.
		
		239: Similar to Y 238, but using the time in a save file instead of the system clock. Typically used to display the save file's save time on the load menu. If the file does not load, the vars will be set to 0.
		
		240: If param is 1, use hankaku (half-width) and katakana characters in the message and menu boxes. If param is 0, use zankaku (full-width) and hiragana characters. This is equivalent to ZH in System 3.5. Unlike past boolean params, param must be exactly 1 to be true, and anything else is false, instead of the reverse.
		
		242: Command unique to SysEng. Toggles menu font to use either the current variable-width font (param 0) or monospace font (param 1). To change the current font, see Y 244 and Y 246, below. If you attempt to switch to a font that was never specified or that did not load correctly, the command will fail and the current font will remain.
		
		243: Command unique to SysEng. As Y 242, but for the text field. To change the current font, see Y 245 and Y 247, below.
		
		244: Command unique to SysEng. Changes the current menu monospace font to either font 0, 1, or 2. Note that, if the menu is currently set to use variable-width fonts, this change will happen in the background.
		
		245: Command unique to SysEng. As Y 244, but for the text field.

		246: Command unique to SysEng. Changes the current menu variable-width font to either font 0, 1, or 2. Note that, if the menu is currently set to use monospace fonts, this change will happen in the background. If you attempt to switch to a variable-width font that was not specified at startup, the process will fail and the current font will remain active (if no variable-width fonts were specified at launch, the current font will remain "0" and it will be impossible to switch to variable-width fonts under any circumstances).
		
		247: Command unique to SysEng. As Y 246, but for the text field.
		
		250: Checks the media the game is stored on. Returns 2 if the game is on CD-ROM, otherwise 1. Commented-out code is written in TTSys/SysEng that can also single out removable drives (floppies or even thumb drives), which would return a 0 if this code is engaged.
		
		251: Sets column mode to the INVERSE of the boolean param.
		
		252: Sets RND to 8, unless you're playing Alice's Cottage 3 floppy, in which case 4. Used to be used to test the computer's available color modes, with 8 indicating 256 colors and 4 presumably indicating 16.
		
		253: Sets show_push to the INVERSE of param. This toggles the "Push" icon that appears in the corner when the game is waiting for user input (typically shows via A commands).
		
		254: Sets RND to 0, unless you are playing Alice no Yakata (any version) or Ningyo, in which case 1. This appears to be former operating system detection code. Surprisingly, TTSys' default, 0, tells the game you're playing on PC-98, while 1, the edge case, tells them you're on Windows 3.1. Presumably these games have features that work better when emulating the PC-98 or Win 3.1 respectively. Other deprecated values that will not appear in TTSys include: 2 - ???, 3 - ???, 4 - FM-TOWNS.
		
		255: Sounds an error and closes the game. Sets post_quit to the INVERSE of param, and then flags a fatal error regardless.
		
	
	Z - Z cmdId, param: - If cmdId is 0-7, switches various color properties based on the param:
	
		0:	Palette bank.
		1:	Message font color.
		2:	Menu font color.
		3: 	Menu frame color.
		4:	Menu back color.
		5:	Current message box frame color.
		6:	Current message box back color.
		7:	Cursor color.
		
			If cmd is between 101-199, it will switch the file attached to CD music IDs in the following fashion. The cmdID indicates the corresponding S command digit + 100, so Z 101 changes the music associated with S 1. The parameter indicates the track to play on the CD + 1, so a parameter of 1 will play CD track 2. This is because Track 1 on a CD is the data track, so this method is used to avoid trying to play it. Another example: a call to Z 103, 5: would cause future S 3 commands to play track 6 on the CD. If the parameter 0 is used, the corresponding S command will revert to using local music instead of CD music.

			If using SysEng, preprocessor tag CD_OVERRIDE will attempt to play files in a local folder instead of off a CD in the CD drive. The folder must be named "bgm", and the files must be named as though ripped from a CD: "02.mp3", "03.mp3", etc. If a file cannot be found, nothing will happen.
	
	
The 'D' command remains unused in System 3.0, and the 'C' command still does not exist.



While System 2 coverage is incomplete, the following commands are supported.

Note that System 2 is ALWAYS in "column mode," where x coordinates and widths are multiplied by 8. 

	! - !VARXXXX:val! - cmd_calc. Variable assignment. Variable name goes on the left of the colon, and a value, variable or or equation on the right.  The other formats allowed by System 3.5 do not yet exist.
	
	{ - { condition: - cmd_branch. Basically an "if" statement. Seems identical to the implementation in 3.5, but without else or else if statements.
	
	} - Ends a conditional branch.

	* - *lbl: - label declaration. Marks a label for use with @ and \ commands.
	
	@ - @lbl: - label_jump, as in 3.5. Moves the playhead to the declaration of the given label.
	
	\ - \lbl: - label_call, as in 3.5. Moves the playhead to the declaration of the given label, but retains the position of this line in memory. You can return to it via \0:.
	
	& - &num: - page_jump. "pages" are the source code files, so "&1:" moves to the top of page0001.
	
	% - page_call. As with page_jump, but retains the position of this line in memory, allowing the programmer to return there via %0:. A side effect of this format is that it is impossible to page call to page 0.
	
	$ - Used to set a non-standard menu (one that doesn't rely on verbs and objects), one entry at a time. Basically, you want to put a bunch of these in a block to create a full menu. The format is $label$, followed by lines of code defining the menu item's text, then another line with a standalone $. The most common use case would be:

                $ lbl4000 $
                "Menu"
                $

        However the code is happy to accept any combinations of commands that produce text, such as H or M commands.
	
	[ - [label, verbId, objID: - set_verbobj. Sets a verb-object pair to appear in the default menu. Make sure these commands are all next to one another (unless you make use of $ commands?).
	
	: - :condition, label, verbId, objID: - set_verbobj2, same as the above, but with a condition in front of the three variables. If the condition is not fulfilled, this menu item will not appear.
	
	] - open_menu. Jump to the currently selected menu, either the default (the first verb-obj menu set in the file) or the one currently set by a $ command.
	
	A - End the text box and wait for user input. After the next input, start a new message box. Does not use a closing colon.
	
	B - B cmdId, index, p1, p2, p3, p4, p5: - Does a number of things (related to either the message window or the game window) depending on the cmdId parameter. See System 3.0 for details, but remember the fact that System 2 is in "column mode." For whatever reason, System 2 alone allows cmdId to be a formula, not just a constant.
	
		1: Set the coordinates of the menu.
		
		2: Switch the currently active on-screen menu, allowing multiple to exist on the same screen.
		
		3: Sets the coordinates of the message box used by text output.
		
		4: Switch the currently active message box, allowing multiple to exist on the same screen.
	
	F - Jumps back to the start of the current file. Does not use a closing colon.
	
	G - G idNum: - Loads (and displays) a CG with no transparency.
	
	H - H length, num: - Equivalent to the 3.5 H command, displaying numeric output or variables. "length" specifies how many digits are displayed, with 0 displaying the full number. Note the lack of 3.5's HH command that displays hankaku numbers.
	
	J - J x, y: - Sets the CG output coordinate using absolute value. Supports column mode, but System 2 cannot disable column mode natively. Seemingly the equivalent of 3.5's J2 rather than J0, as the coordinates remain in memory until adjusted by the next J command.
	
	K - Newline that waits for the user to press a button, sort of like a hybrid between the R and A commands.
	
	L - L slot: - Loads a saved game from the given slot.
	
	M - M newString: - If tvar_index (set by extend command Y 8) is between 1 and 10, the string assigned to that variable will be changed to match the newString param.
	
		It is not yet clear if System 2 uses the alternate features of M commands available in System 3.0.
	
	O - O st, width, height: - Draws white grid lines of width and height matching the second and third params, with starting positions based on the first param alone (mod 80 times 8 for X, div 80 for Y).
	
	P - P idNum: - Not currently working. Changes the menu frame and cursor colors to match the param, but the mathematical relationship between parameter and color is unclear (it doesn't match the palette math for Sys1's text color features). P 2: White, P 8: blue, P 15: Also white?
	
	Q - Q slot: - Saves the game in the given slot. Note that System 1-3.5 are extremely strict about saving, marking the exact address (in the file) of the Q command used to create a save. If the command is moved so much as a byte in any direction, save files created by previous versions will fail! As a result, it's a good idea to move save commands towards the top of their files to minimize the amount of code that could potentially move the Q.
	
	R - Newline. Does not use a closing colon.
	
	S - S idNum: - Play (or if currently playing, stop) the music index tied to the constant ID number.
	
	U - U idNum, colCode: - Loads a CG, including a transparency value (a color code to turn transparent?). Toshiya mistakenly copy-and-pasted the special provisions for Intruder from Sys1 into this version of the function.
	
	V - V mode, index, 28x variable params: - Stack operations. In mode 0, sets the twenty-eight variable params to match indicies 0-27 of the stack ID given as the second parameter, and then also copy values from the same index of tvar_stack to the active text variables. On any other mode, do the reverse, copying the params and the text variables to the given stacks. Unlike System 3.0, the mode must be a constant.
	
	X - X idNum: - Displays text variables by ID number. 
	
	Y - Y cmdId, param: - Extend command. Does a variety of wildly different things depending on the first variable, using the second variable as a parameter. There are a HUGE number of commands, some of have equivalents in 3.5 under other names. Some of the missing commands explicitly do nothing, while most others are simply ignored by the code. Because these functions are quite esoteric, I sometimes use the TTSys var names to avoid having to turn the program upside-down to figure out what it's doing.
	
		1:	Resets any changes made to the message box via T commands, and clears the text box if param == 0. Note the changes from 3.5.
		
		2: 	If param is 0, sets D01-D20 (VAR0001-VAR0020) to 0. If param is 1, set U01-U20 (VAR0021-VAR0040) to 0. If param is 2, set B01-B16 (VAR0041-VAR0056) to 0. Once again, note the changes from 3.5.
		
		3:	Wait (param * 1/60th of a seconds). Does not retrieve key input like 3.0 and 3.5.
		
		4:	Generates a random integer from 1 to param (inclusive). If param is 0 or 1, return 0.
		
		5: ???
		
		6: Does nothing. Examination of the code suggests the function is inconsequential. One set of code in Yakata2 suggests a relationship with Y 5, but most do not.
		
		7:  Draws a box selected by index, which should be defined using the B 3 and B 4 commands. Unlike System 3.0, some boxes appear to be predefined in TTSys AGS::AGS(). In Maria and Kanpan, this command does nothing for some reason (it would be one thing if Maria and Kanpan outright didn't use the command, but to use the command and have it do nothing?).
		
		8:  Sets tvar_index, used exclusively by the M command.
		
		14: Sets RND (VAR0000) to 1.
		
		25: Deliberately disabled in SysENG. These commands are used to create text boxes and/or to align text, but I can't figure out the particulars. Since they don't do anything that can't be done better with B commands, end-users should replace them with B commands.
		
		26: Sets message box font size depending on param. Param 1 = 16pt, 2 = 24, 3 = 32, 4 = 48, or 5 = 64. The program starts with menu font at 16, and will also set to 16 if you enter an invalid param. SysEng uses param 6 and 7 for a custom overrides that can be hardcoded for specific projects in AGS::AGS(), and feel free to add your own.
		
		40: Fade in or out effect. Y 40, 1: fades out, Y 40, 0: fades in. There is no way to adjust the timing or color like in System 3.0: color is always black, and timing is always 1s. Y 40, 2 also exists, needs investigation.
		
			For forwards-compatibility's sake, 41, 42 and 43 also access this function.
		
		221-229: These commands dumps the contents of text vars to the message box, with spaces delineating. Almost certainly used for debugging, since it would be a huge mess. If you use Y 221, it will dump only text var 1, Y 222 will cause you to dump text vars 1 and 2, and so on until Y 229, which dumps the first 9 text vars. There is no equivalent command to dump all ten text vars.
		
		240: Backported from Sys3.0. If param is 1, use hankaku (half-width) and katakana characters. If param is 0, use zankaku (full-width) and hiragana characters. This is equivalent to ZH in System 3.5. Unlike past boolean setters, param must be exactly 1 to be true, and anything else is false, instead of the reverse.
		
		242: Command unique to SysEng. Toggles menu font to use either the current variable-width font (param 0) or monospace font (param 1). To change the current font, see Y 244 and Y 246, below. If you attempt to switch to a font that was never specified or that did not load correctly, the command will fail and the current font will remain.
		
		243: Command unique to SysEng. As Y 242, but for the text field. To change the current font, see Y 245 and Y 247, below.
		
		244: Command unique to SysEng. Changes the current menu monospace font to either font 0, 1, or 2. Note that, if the menu is currently set to use variable-width fonts, this change will happen in the background.
		
		245: Command unique to SysEng. As Y 244, but for the text field.

		246: Command unique to SysEng. Changes the current menu variable-width font to either font 0, 1, or 2. Note that, if the menu is currently set to use monospace fonts, this change will happen in the background. If you attempt to switch to a variable-width font that was not specified at startup, the process will fail and the current font will remain active (if no variable-width fonts were specified at launch, the current font will remain "0" and it will be impossible to switch to variable-width fonts under any circumstances).
		
		247: Command unique to SysEng. As Y 246, but for the text field.
		
		252: Sets RND to 8.
		
		254: Sets RND to 0.
		
		255: Sounds an error and closes the game. Sets post_quit to the INVERSE of param, then flags a fatal error regardless.
	

Toshiya includes but dummies most remaining Sys2 commands, causing them to be skipped over with no code execution except for debug output. That said, the debug output is surprisingly detailed, which may imply that certain commands exist but were never implemented in TTSys. Their parameters do not always match the ones found in System 3, and the dummied D command is entirely unique to this version. It's unclear why he included these commands or how he derived their parameter structures. Parameters in the debug output are all identified as "p" (except with the Z command), implying they are filler names. A programmer attempting to localize these games should be aware of these "unused" commands, and Sys0Decompiler should output a warning when they appear (once I get around to adding support for Sys2).

For completeness' sake, here are the dummied commands and their parameter structure as-written in TTSys. 

	D - D p1, p2, p3, p4, p5, p6, p7, p8: - This command, if it exists, is entirely unique to Sys2.
	
	E - E p1, p2, p3: - Does not match param structure for Sys3.0.
	
	I - I p1, p2, p3: - Does not match param structure for Sys3.0.
	
	J - J p1, p2: - Matches param structure for Sys3.0.
	
	N - N p1, p2: - Does not match param structure for Sys3.0.
	
	T - T p1, p2, p3: - Does not match param structure for Sys3.0.
	
	V - V p1, p2: - Matches param structure for Sys3.0.
	
	W - W p1, p2, p3, p4: - Does not match param structure for Sys3.0.
	
	Z - Z cmdId, param: - Matches param structure for both Sys1 and 3.0, backed up by a comment block that mentions five Z commands, numbered Z1-Z5.
	
	A comment block also mentions several Y commands not found in Sys2: Y11, Y23, Y27 and Y50. Only Y27 exists in Sys3.0.
	
As in other versions, the 'C' command does not exist in Sys2.